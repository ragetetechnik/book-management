openapi: 3.0.0
info:
  title: Book Management API
  version: 0.0.1
  description: REST API for Book Management
servers:
  - url: http://localhost:3000/api
tags:
  - name: Authentication
  - name: Books
  - name: Authors
  - name: Publishers
  - name: Categories
paths:
  /auth:
    post:
      tags:
        - Authentication
      summary: Post request to get a token
      requestBody:
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    type: string
                    example: admin
                required:
                  - user
      responses:
        '500':
          description: server error
        '200':
          description: ok
  /books:
    get:
      tags:
        - Books
      summary: Retrieve all books
      security:
        - bearerAuth: [ ]
      parameters:
        - in: query
          name: category
          schema:
            type: string
          required: false
          description: Filter books by category
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    title:
                      type: string
                      example: The Book
        '204':
          description: no content with that category filter
        '500':
          description: server error
        '401':
          description: unauthorised
    post:
      tags:
        - Books
      summary: Create a new book
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPost'
      responses:
        '201':
          description: ok (created)
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 1
        '500':
          description: server error
        '422':
          description: unprocessable content
        '401':
          description: unauthorised
        '403':
          description: forbidden

  /books/{id}:
    get:
      tags:
        - Books
      summary: Retrieve a specific book by ID
      security:
        - bearerAuth: [ ]
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                allOf:
                  - $ref: '#/components/schemas/BookRec'
                  - type: object
                    properties:
                      id:
                        type: integer
                        example: 1
        '500':
          description: server error
        '404':
          description: not found
        '401':
          description: unauthorised
    put:
      tags:
        - Books
      summary: Update an existing book
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookPost'
      responses:
        '200':
          description: ok (updated)
        '422':
          description: unprocessable content
        '500':
          description: server error
        '401':
          description: unauthorised
        '404':
          description: not found
        '403':
          description: forbidden
    delete:
      tags:
        - Books
      summary: Delete a book
      security:
        - bearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: ok (deleted)
        '500':
          description: server error
        '401':
          description: unauthorised
        '404':
          description: not found
        '403':
          description: forbidden

  /authors:
    get:
      tags:
        - Authors
      summary: Retrieve all authors
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    last_name:
                      type: string
                      example: Miller
        '500':
          description: server error
        '401':
          description: unauthorised
  /categories:
    get:
      tags:
        - Categories
      summary: Retrieve all categories
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Miller
        '500':
          description: server error
        '401':
          description: unauthorised
  /publishers:
    get:
      tags:
        - Publishers
      summary: Retrieve all publishers
      security:
        - bearerAuth: [ ]
      responses:
        '200':
          description: ok
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: Miller
        '500':
          description: server error
        '401':
          description: unauthorised

components:
  securitySchemes:
    bearerAuth:
      type: apiKey
      name: Authorization
      in: header
      description: >-
        Enter the token with the `Bearer ` prefix, e.g. "Bearer aabbccde1112345".
  schemas:
    Book:
      type: object
      properties:
        title:
          type: string
          example: Book
        isbn:
          type: string
          example: 978-0-12-123456-7
        condition:
          type: string
          example: very good
        publication_year:
          type: integer
          example: 2021
      required:
        - title
        - isbn
        - condition
        - publication_year
    BookRec:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            publisher:
              type: string
              example: "The Publishing Company"
            category:
              type: string
              example: "Mystery"
            authors:
              type: string
              example: "Miller John"
          required:
            - publisher
            - category
            - authors
    BookPost:
      allOf:
        - $ref: '#/components/schemas/Book'
        - type: object
          properties:
            publisher_id:
              type: integer
              example: 1
            category_id:
              type: integer
              example: 1
            authors:
              type: array
              items:
                type: integer
                example: 1
          required:
            - publisher_id
            - category_id
            - authors